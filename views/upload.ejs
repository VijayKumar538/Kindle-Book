<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Upload Book - BookHive</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/chat.css">
  <style>
    .alert {
      padding: 15px;
      margin-bottom: 20px;
      border-radius: 4px;
      background-color: #f8d7da;
      color: #721c24;
      border: 1px solid #f5c6cb;
      display: flex;
      justify-content: space-between;
      align-items: center;
    }
    .alert-error {
      background-color: #f8d7da;
      color: #721c24;
    }
    .alert .close-btn {
      cursor: pointer;
      font-weight: bold;
      font-size: 1.2em;
      line-height: 1;
      border: none;
      background: none;
      padding: 0 5px;
    }
    .form-container {
      max-width: 600px;
      margin: 0 auto;
      padding: 20px;
    }
    .form-group {
      margin-bottom: 15px;
    }
    .form-group label {
      display: block;
      margin-bottom: 5px;
      font-weight: bold;
    }
    .form-group input, .form-group textarea, .form-group select {
      width: 100%;
      padding: 8px;
      border: 1px solid #ddd;
      border-radius: 4px;
    }
    .form-help {
      font-size: 0.9em;
      color: #666;
      margin-top: 5px;
    }
    .file-help {
      font-size: 0.9em;
      color: #721c24;
    }
    .btn {
      padding: 10px 20px;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-size: 1em;
      background-color: #4285f4;
      color: white;
    }
    .btn-primary {
      background-color: #4285f4;
    }
    .btn-primary:hover {
      background-color: #3267d6;
    }
    .visibility-info {
      display: none;
      margin-top: 5px;
      font-size: 0.9em;
    }
    .storage-usage {
      font-size: 0.9em;
      color: #666;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <header>
    <div class="container">
      <div class="logo-section">
        <img src="/images/logo.jpg" alt="BookHive Logo" class="logo">
      </div>
      <nav>
        <a href="/news">NewsToday</a>
        <a href="/library">My Library</a>
        <a href="/explore">Explore</a>
        <a href="/upload" class="active">Upload Book</a>
        <a href="/account">Account</a>
        <a href="/logout">Logout</a>
      </nav>
    </div>
  </header>
  
  <main class="container form-container">
    <h2>Upload New Book</h2>
    
    <% if (typeof error !== 'undefined') { %>
      <div class="alert alert-error">
        <%= error %>
        <button class="close-btn" onclick="this.parentElement.style.display='none'">&times;</button>
      </div>
    <% } %>
    
    <div class="share-action-buttons">
      <div class="share-container">
        <div class="share-toggle" title="Share Library">
          <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
            <path d="M18 16.08c-.76 0-1.44.3-1.96.77L8.91 12.7c.05-.23.09-.46.09-.7s-.04-.47-.09-.7l7.05-4.11c.54.5 1.25.81 2.04.81 1.66 0 3-1.34 3-3s-1.34-3-3-3-3 1.34-3 3c0 .24.04.47.09.7L8.04 9.81C7.5 9.31 6.79 9 6 9c-1.66 0-3 1.34-3 3s1.34 3 3 3c.79 0 1.5-.31 2.04-.81l7.12 4.16c-.05.21-.08.43-.08.65 0 1.61 1.31 2.92 2.92 2.92 1.61 0 2.92-1.31 2.92-2.92s-1.31-2.92-2.92-2.92z"/>
          </svg>
        </div>
        <div class="share-options">
          <button class="share-option" data-platform="whatsapp" title="Share on WhatsApp">
            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6b/WhatsApp.svg" alt="WhatsApp" class="share-icon">
            WhatsApp
          </button>
          <button class="share-option" data-platform="instagram" title="Share on Instagram">
            <img src="https://upload.wikimedia.org/wikipedia/commons/a/a5/Instagram_icon.png" alt="Instagram" class="share-icon">
            Instagram
          </button>
          <button class="share-option" data-platform="x" title="Share on X">
            <img src="https://upload.wikimedia.org/wikipedia/commons/6/6f/Logo_of_Twitter.svg" alt="X" class="share-icon">
            X
          </button>
          <button class="share-option" data-platform="copy" title="Copy Link">
            <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
              <path d="M16 1H4c-1.1 0-2 .9-2 2v14h2V3h12V1zm3 4H8c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h11c1.1 0 2-.9 2-2V7c0-1.1-.9-2-2-2zm0 16H8V7h11v14z"/>
            </svg>
            Copy Link
          </button>
        </div>
        <div id="shareMessage" class="share-message"></div>
      </div>
      
      <div class="notes-container">
        <div class="notes-toggle" title="Notepad">✏️</div>
        <div class="notes-area">
          <div id="notesText" class="content-editable" contenteditable="true" placeholder="Write your notes here..."><%- note %></div>
        </div>
      </div>
      
      <div class="feedback-container">
        <div class="feedback-toggle" title="Provide Feedback">
          <svg fill="currentColor" viewBox="0 0 24 24">
            <path d="M20 2H4c-1.1 0-2 .9-2 2v18l4-4h14c1.1 0 2-.9 2-2V4c0-1.1-.9-2-2-2zm0 14H6l-2 2V4h16v12z"/>
            <path d="M9 11h2v2H9zm0-4h2v2H9zm4 0h2v2h-2z"/>
          </svg>
        </div>
        <div class="feedback-area">
          <textarea id="feedbackText" placeholder="Write your feedback here..." required></textarea>
          <button class="submit-feedback">Submit</button>
          <div id="feedbackMessage" class="feedback-message"></div>
        </div>
      </div>
    </div>
    
    <form action="/upload" method="POST" enctype="multipart/form-data">
      <div class="form-group">
        <label for="title">Title</label>
        <input type="text" id="title" name="title" required>
      </div>
      
      <div class="form-group">
        <label for="author">Author</label>
        <input type="text" id="author" name="author" required>
      </div>
      
      <div class="form-group">
        <label for="description">Description</label>
        <textarea id="description" name="description" rows="3"></textarea>
      </div>
      
      <div class="form-group">
        <label for="tags">Tags</label>
        <input type="text" id="tags" name="tags" placeholder="fiction, science, textbook (comma-separated)">
        <p class="form-help">Separate tags with commas</p>
      </div>
      
      <div class="form-group">
        <label for="visibility">Visibility</label>
        <select id="visibility" name="visibility" required>
          <option value="private">Private (Only you can access)</option>
          <option value="public">Public (Anyone can access)</option>
          <option value="restricted">Restricted (Specific users with permission)</option>
        </select>
        <p class="form-help">
          <span class="visibility-info private">Private: Only you can view and access this content.</span>
          <span class="visibility-info public">Public: Any user can view and read this content.</span>
          <span class="visibility-info restricted">Restricted: Only users you approve can access this content.</span>
        </p>
      </div>
      
      <div class="form-group file-input">
        <label for="file">File</label>
        <input type="file" id="file" name="file" accept="application/pdf" required>
        <p class="file-help">Only PDF files are supported (max 50MB)</p>
      </div>
      
      <div class="form-group">
        <div class="storage-usage">
          <p>Note: Your uploaded files count toward your storage limit</p>
        </div>
      </div>
      
      <button type="submit" class="btn btn-primary">Upload Book</button>
    </form>
  </main>
  
  <% if (user) { %>
    <div class="chat-icon" onclick="toggleChat()">
      <img src="/images/chat-icon.png" alt="Chat" />
    </div>
    <div class="chat-window" id="chatWindow">
      <div class="chat-header">
        <h3><%= user.profession.charAt(0).toUpperCase() + user.profession.slice(1) %> Group Chat</h3>
        <button onclick="toggleChat()">Close</button>
      </div>
      <div class="chat-messages" id="chatMessages"></div>
      <div class="chat-input">
        <input type="text" id="chatInput" placeholder="Type a message..." />
        <button onclick="sendMessage()">Send</button>
      </div>
    </div>
  <% } %>
  
  <footer>
    <div class="container">
      <p>© 2025 BookHive. All rights reserved.</p>
    </div>
  </footer>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      // Notes functionality
      const notesToggle = document.querySelector('.notes-toggle');
      const notesArea = document.querySelector('.notes-area');
      const notesText = document.getElementById('notesText');
      let typingTimer;

      if (notesToggle && notesArea) {
        console.log('Notes toggle and area found');
        notesToggle.addEventListener('click', () => {
          console.log('Notes toggle clicked');
          notesArea.classList.toggle('active');
          feedbackArea.classList.remove('active'); // Close feedback area if open
          shareOptions.classList.remove('active'); // Close share options if open
        });
      } else {
        console.log('Notes toggle or area not found');
      }

      notesText.addEventListener('input', () => {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(saveNotes, 1000);
      });

      async function saveNotes() {
        const content = notesText.innerHTML;
        try {
          const response = await fetch('/notes/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
          });
          const data = await response.json();
          if (!data.success) {
            console.error('Failed to save note:', data.message);
          }
        } catch (err) {
          console.error('Error saving note:', err);
        }
      }

      // Feedback functionality
      const feedbackToggle = document.querySelector('.feedback-toggle');
      const feedbackArea = document.querySelector('.feedback-area');
      const feedbackText = document.getElementById('feedbackText');
      const feedbackMessage = document.getElementById('feedbackMessage');
      const submitFeedbackBtn = document.querySelector('.submit-feedback');

      if (feedbackToggle && feedbackArea) {
        console.log('Feedback toggle and area found');
        feedbackToggle.addEventListener('click', () => {
          console.log('Feedback toggle clicked');
          feedbackArea.classList.toggle('active');
          notesArea.classList.remove('active'); // Close notes area if open
          shareOptions.classList.remove('active'); // Close share options if open
        });

        submitFeedbackBtn.addEventListener('click', async () => {
          const content = feedbackText.value.trim();
          if (!content) {
            feedbackMessage.textContent = 'Please enter your feedback.';
            feedbackMessage.className = 'feedback-message error';
            return;
          }

          feedbackMessage.textContent = 'Submitting...';
          feedbackMessage.className = 'feedback-message';

          try {
            const response = await fetch('/feedback', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
              },
              body: JSON.stringify({ content })
            });

            if (!response.ok) {
              throw new Error(`HTTP error! Status: ${response.status}`);
            }

            const data = await response.json();
            if (data.success) {
              feedbackMessage.textContent = 'Feedback submitted successfully!';
              feedbackMessage.className = 'feedback-message success';
              feedbackText.value = ''; // Clear the textarea
              feedbackArea.classList.remove('active'); // Close the feedback area
            } else {
              feedbackMessage.textContent = data.message || 'Failed to submit feedback.';
              feedbackMessage.className = 'feedback-message error';
            }
          } catch (err) {
            feedbackMessage.textContent = `Error submitting feedback: ${err.message}`;
            feedbackMessage.className = 'feedback-message error';
            console.error('Error submitting feedback:', err);
          }
        });
      } else {
        console.log('Feedback toggle or area not found');
      }

      // Share functionality
      const shareToggle = document.querySelector('.share-toggle');
      const shareOptions = document.querySelector('.share-options');
      const shareMessage = document.getElementById('shareMessage');
      const currentUrl = window.location.href;

      if (shareToggle && shareOptions) {
        shareToggle.addEventListener('click', () => {
          shareOptions.classList.toggle('active');
          notesArea.classList.remove('active'); // Close notes area if open
          feedbackArea.classList.remove('active'); // Close feedback area if open
        });

        // Close share options when clicking outside
        document.addEventListener('click', (e) => {
          if (!shareToggle.contains(e.target) && !shareOptions.contains(e.target)) {
            shareOptions.classList.remove('active');
          }
        });

        const shareButtons = shareOptions.querySelectorAll('.share-option');
        shareButtons.forEach(button => {
          button.addEventListener('click', (e) => {
            e.stopPropagation(); // Prevent closing the dropdown
            const platform = button.dataset.platform;
            let url = '';

            switch (platform) {
              case 'whatsapp':
                url = `https://wa.me/?text=${encodeURIComponent('Check out my library on BookHive: ' + currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'instagram':
                url = `https://www.instagram.com/direct/new/?text=${encodeURIComponent('Check out my library on BookHive: ' + currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'x':
                url = `https://twitter.com/intent/tweet?text=Check out my library on BookHive: ${encodeURIComponent(currentUrl)}`;
                window.open(url, '_blank');
                break;
              case 'copy':
                navigator.clipboard.writeText(currentUrl).then(() => {
                  shareMessage.textContent = 'Link copied to clipboard!';
                  shareMessage.className = 'share-message success';
                  setTimeout(() => {
                    shareMessage.textContent = '';
                    shareMessage.className = 'share-message';
                  }, 2000);
                }).catch(err => {
                  shareMessage.textContent = 'Failed to copy link.';
                  shareMessage.className = 'share-message error';
                  console.error('Copy error:', err);
                });
                break;
            }
            shareOptions.classList.remove('active'); // Close dropdown after action
          });
        });
      }

      // Existing upload form functionality
      const visibilitySelect = document.getElementById('visibility');
      const visibilityInfos = document.querySelectorAll('.visibility-info');

      visibilityInfos.forEach(info => {
        info.style.display = 'none';
      });

      const showRelevantInfo = () => {
        const selectedValue = visibilitySelect.value;
        visibilityInfos.forEach(info => {
          if (info.classList.contains(selectedValue)) {
            info.style.display = 'block';
          } else {
            info.style.display = 'none';
          }
        });
      };

      showRelevantInfo();
      visibilitySelect.addEventListener('change', showRelevantInfo);

      const fileInput = document.getElementById('file');
      const fileHelp = document.querySelector('.file-help');
      const originalHelpText = fileHelp.textContent;

      fileInput.addEventListener('change', () => {
        const file = fileInput.files[0];
        if (file) {
          const maxSize = 50 * 1024 * 1024;
          if (file.size > maxSize) {
            fileHelp.textContent = 'Error: File exceeds the 50MB size limit';
            fileHelp.style.color = 'red';
            fileInput.value = '';
          } else if (file.type !== 'application/pdf') {
            fileHelp.textContent = 'Error: Only PDF files are allowed';
            fileHelp.style.color = 'red';
            fileInput.value = '';
          } else {
            fileHelp.textContent = originalHelpText;
            fileHelp.style.color = '';
          }
        }
      });
    });
  </script>

  <% if (user) { %>
    <script src="/socket.io/socket.io.js"></script>
    <script>
      const socket = io();
      const userId = '<%= user._id %>';
      const profession = '<%= user.profession %>';

      socket.emit('joinProfession', { userId, profession });

      socket.on('chatHistory', (messages) => {
        const chatMessages = document.getElementById('chatMessages');
        chatMessages.innerHTML = '';
        messages.forEach(msg => {
          const messageElement = document.createElement('div');
          messageElement.classList.add('message');
          messageElement.innerHTML = `<strong>${msg.user.username}</strong>: ${msg.content} <span>${new Date(msg.timestamp).toLocaleTimeString()}</span>`;
          chatMessages.appendChild(messageElement);
        });
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });

      socket.on('chatMessage', (msg) => {
        const chatMessages = document.getElementById('chatMessages');
        const messageElement = document.createElement('div');
        messageElement.classList.add('message');
        messageElement.innerHTML = `<strong>${msg.user.username}</strong>: ${msg.content} <span>${new Date(msg.timestamp).toLocaleTimeString()}</span>`;
        chatMessages.appendChild(messageElement);
        chatMessages.scrollTop = chatMessages.scrollHeight;
      });

      function sendMessage() {
        const input = document.getElementById('chatInput');
        const content = input.value.trim();
        if (content) {
          socket.emit('chatMessage', { userId, profession, content });
          input.value = '';
        }
      }

      function toggleChat() {
        const chatWindow = document.getElementById('chatWindow');
        chatWindow.classList.toggle('open');
      }

      document.getElementById('chatInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
          sendMessage();
        }
      });
    </script>
  <% } %>
</body>
</html>