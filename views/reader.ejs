<!-- views/reader.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= book.title %> - BookReader</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/reader.css">
  <script src="https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.min.js"></script>
</head>
<body class="reader-page">
  <header class="reader-header">
    <div class="container">
      <a href="/library" class="back-button">‚Üê Back to Library</a>
      <h1 class="book-title"><%= book.title %></h1>
      <p class="book-author">by <%= book.author %></p>
    </div>
  </header>
  
  <main class="reader-container">
    <div class="pdf-controls">
      <div class="page-navigation">
        <button id="prev" class="btn btn-control">Previous</button>
        <span id="page-info">Page <span id="page-num"></span> of <span id="page-count"></span></span>
        <button id="next" class="btn btn-control">Next</button>
      </div>
      <div class="zoom-controls">
        <button id="zoom-out" class="btn btn-control">-</button>
        <span id="zoom-level">100%</span>
        <button id="zoom-in" class="btn btn-control">+</button>
      </div>
    </div>
    
    <div id="pdf-viewer">
      <canvas id="pdf-canvas"></canvas>
    </div>
  </main>
  
  <script>
    // PDF.js initialization
    const pdfjsLib = window['pdfjs-dist/build/pdf'];
    pdfjsLib.GlobalWorkerOptions.workerSrc = 'https://cdnjs.cloudflare.com/ajax/libs/pdf.js/3.4.120/pdf.worker.min.js';
    
    // PDF viewer
    let pdfDoc = null;
    let pageNum = 1;
    let pageRendering = false;
    let pageNumPending = null;
    let scale = 1.0;
    const canvas = document.getElementById('pdf-canvas');
    const ctx = canvas.getContext('2d');
    
    // Button elements
    const prevButton = document.getElementById('prev');
    const nextButton = document.getElementById('next');
    const zoomInButton = document.getElementById('zoom-in');
    const zoomOutButton = document.getElementById('zoom-out');
    
    // Load the PDF
    const loadPDF = async () => {
      try {
        const loadingTask = pdfjsLib.getDocument('/pdf/<%= book._id %>');
        pdfDoc = await loadingTask.promise;
        
        document.getElementById('page-count').textContent = pdfDoc.numPages;
        
        // Initial page render
        renderPage(pageNum);
      } catch (error) {
        console.error('Error loading PDF:', error);
        alert('Failed to load the PDF. Please try again later.');
      }
    };
    
    // Render the page
    const renderPage = (num) => {
      pageRendering = true;
      
      // Update UI
      document.getElementById('page-num').textContent = num;
      
      // Get page
      pdfDoc.getPage(num).then((page) => {
        // Calculate scale based on viewport
        const viewport = page.getViewport({ scale });
        canvas.height = viewport.height;
        canvas.width = viewport.width;
        
        // Render PDF page
        const renderContext = {
          canvasContext: ctx,
          viewport: viewport
        };
        
        const renderTask = page.render(renderContext);
        
        // When render is complete
        renderTask.promise.then(() => {
          pageRendering = false;
          
          if (pageNumPending !== null) {
            renderPage(pageNumPending);
            pageNumPending = null;
          }
        });
      });
    };
    
    // Queue next page
    const queueRenderPage = (num) => {
      if (pageRendering) {
        pageNumPending = num;
      } else {
        renderPage(num);
      }
    };
    
    // Previous page
    const onPrevPage = () => {
      if (pageNum <= 1) {
        return;
      }
      pageNum--;
      queueRenderPage(pageNum);
    };
    
    // Next page
    const onNextPage = () => {
      if (pageNum >= pdfDoc.numPages) {
        return;
      }
      pageNum++;
      queueRenderPage(pageNum);
    };
    
    // Zoom in
    const onZoomIn = () => {
      scale += 0.25;
      document.getElementById('zoom-level').textContent = `${Math.round(scale * 100)}%`;
      queueRenderPage(pageNum);
    };
    
    // Zoom out
    const onZoomOut = () => {
      if (scale <= 0.5) {
        return;
      }
      scale -= 0.25;
      document.getElementById('zoom-level').textContent = `${Math.round(scale * 100)}%`;
      queueRenderPage(pageNum);
    };
    
    // Add event listeners
    prevButton.addEventListener('click', onPrevPage);
    nextButton.addEventListener('click', onNextPage);
    zoomInButton.addEventListener('click', onZoomIn);
    zoomOutButton.addEventListener('click', onZoomOut);
    
    // Load the PDF when the page loads
    document.addEventListener('DOMContentLoaded', loadPDF);
  </script>
</body>
</html>