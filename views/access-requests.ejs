<!-- views/access-requests.ejs -->
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Access Requests - BookHive</title>
  <link rel="stylesheet" href="/css/style.css">
</head>
<body>
  <header>
    <div class="container">
      <div class="logo-section">
        <img src="/images/logo.jpg" alt="BookHive Logo" class="logo">
      </div>
      <nav>
        <a href="/library">My Library</a>
        <a href="/pinned">Pinned Books</a>
        <a href="/explore">Explore</a>
        <a href="/my-requests">My Requests</a>
        <a href="/access-requests" class="active">Access Requests</a>
        <a href="/upload">Upload Book</a>
        <a href="/account">Account</a>
        <a href="/logout">Logout</a>
      </nav>
    </div>
  </header>
  
  <main class="container">
    <h2>Pending Access Requests</h2>

    <div class="notes-container">
      <div class="notes-toggle">✏️</div>
      <div class="notes-area">
        <div id="notesText" class="content-editable" contenteditable="true" placeholder="Write your notes here..."><%- note %></div>
      </div>
    </div>

    <% if (requests.length === 0) { %>
      <div class="empty-state">
        <p>You don't have any pending access requests.</p>
      </div>
    <% } else { %>
      <div class="requests-table">
        <table>
          <thead>
            <tr>
              <th>Book</th>
              <th>Author</th>
              <th>Requested By</th>
              <th>Request Date</th>
              <th>File Type</th>
              <th>Actions</th>
            </tr>
          </thead>
          <tbody>
            <% requests.forEach(request => { %>
              <tr data-request-id="<%= request._id %>">
                <td><%= request.book ? request.book.title : 'Unknown Book' %></td>
                <td><%= request.book ? request.book.author : 'Unknown Author' %></td>
                <td>
                  <%= request.requestedBy ? request.requestedBy.username : 'Unknown User' %>
                  <span class="email">(<%= request.requestedBy ? request.requestedBy.email : '' %>)</span>
                </td>
                <td class="request-date"><%= new Date(request.requestDate).toLocaleDateString() %></td>
                <td><%= request.book ? request.book.fileType.toUpperCase() : 'Unknown' %></td>
                <td class="action-buttons">
                  <button class="btn btn-small btn-primary handle-request" data-action="approve">Approve</button>
                  <button class="btn btn-small btn-danger handle-request" data-action="decline">Decline</button>
                  <a href="/view/<%= request.book._id %>" class="btn btn-small btn-secondary">Preview</a>
                </td>
              </tr>
            <% }) %>
          </tbody>
        </table>
      </div>
    <% } %>
  </main>
  
  <footer>
    <div class="container">
      <p>&copy; 2025 BookHive. All rights reserved.</p>
    </div>
  </footer>
  
  <script>
    document.addEventListener('DOMContentLoaded', () => {
      const notesToggle = document.querySelector('.notes-toggle');
      const notesArea = document.querySelector('.notes-area');
      const notesText = document.getElementById('notesText');
      let typingTimer;

      notesToggle.addEventListener('click', () => {
        const isVisible = notesArea.style.display === 'block';
        notesArea.style.display = isVisible ? 'none' : 'block';
      });

      notesText.addEventListener('input', () => {
        clearTimeout(typingTimer);
        typingTimer = setTimeout(saveNotes, 1000);
      });

      async function saveNotes() {
        const content = notesText.innerHTML; // Use innerHTML to capture bold tags
        try {
          const response = await fetch('/notes/save', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ content })
          });
          const data = await response.json();
          if (!data.success) {
            console.error('Failed to save note:', data.message);
          }
        } catch (err) {
          console.error('Error saving note:', err);
        }
      }
      // Format dates for better display
      const formatDates = () => {
        const dateElements = document.querySelectorAll('.request-date');
        dateElements.forEach(element => {
          try {
            const date = new Date(element.textContent.trim());
            const formattedDate = date.toLocaleDateString(undefined, {
              year: 'numeric',
              month: 'short',
              day: 'numeric'
            });
            element.textContent = formattedDate;
          } catch (err) {
            console.error('Error formatting date:', err);
          }
        });
      };
      
      formatDates();
      
      // Handle approve/decline requests
      const actionButtons = document.querySelectorAll('.handle-request');
      
      actionButtons.forEach(button => {
        button.addEventListener('click', async (e) => {
          const action = e.target.dataset.action;
          const requestRow = e.target.closest('tr');
          const requestId = requestRow.dataset.requestId;
          
          // Confirmation dialog
          const confirmAction = confirm(`Are you sure you want to ${action} this access request?`);
          if (!confirmAction) return;
          
          try {
            // Disable buttons to prevent multiple clicks
            const buttons = requestRow.querySelectorAll('button');
            buttons.forEach(btn => btn.disabled = true);
            
            const response = await fetch(`/handle-request/${requestId}`, {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json'
              },
              body: JSON.stringify({ action })
            });
            
            const data = await response.json();
            
            if (data.success) {
              // Show success message
              const statusMessage = document.createElement('div');
              statusMessage.className = `status-message ${action}-message`;
              statusMessage.textContent = `Request ${action}d successfully`;
              requestRow.querySelector('.action-buttons').innerHTML = '';
              requestRow.querySelector('.action-buttons').appendChild(statusMessage);
              
              // Fade out and remove row after a delay
              setTimeout(() => {
                requestRow.style.opacity = '0';
                setTimeout(() => {
                  requestRow.remove();
                  
                  // Show empty state if no more requests
                  if (document.querySelectorAll('tbody tr').length === 0) {
                    const requestsTable = document.querySelector('.requests-table');
                    requestsTable.innerHTML = `
                      <div class="empty-state">
                        <p>You don't have any pending access requests.</p>
                      </div>
                    `;
                  }
                }, 500);
              }, 2000);
            } else {
              // Re-enable buttons if failed
              buttons.forEach(btn => btn.disabled = false);
              alert(data.message || 'Failed to process request');
            }
          } catch (err) {
            console.error('Error:', err);
            alert('An error occurred while processing the request');
            
            // Re-enable buttons if error
            const buttons = requestRow.querySelectorAll('button');
            buttons.forEach(btn => btn.disabled = false);
          }
        });
      });
    });
  </script>
</body>
</html>