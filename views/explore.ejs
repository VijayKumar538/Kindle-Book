<!DOCTYPE html>
<html lang="en">
<head>
    <base href="/bookhive/"> <!-- Added to handle subfolder for static assets -->
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Explore Books - BookHive</title>
    <link rel="stylesheet" href="/css/style.css">
</head>
<body>
    <header>
        <div class="container">
            <div class="logo-section">
                <img src="/images/logo.jpg" alt="BookHive Logo" class="logo">
            </div>
            <nav>
                <a href="/library">My Library</a>
                <a href="/pinned">Pinned Books</a>
                <a href="/explore" class="active">Explore</a>
                <!-- <a href="/my-requests">My Requests</a>
                <a href="/access-requests">Access Requests</a> -->
                <a href="/upload">Upload</a>
                <a href="/account">Account</a>
                <a href="/logout">Logout</a>
            </nav>
        </div>
    </header>
    
    <main class="container">
        <h2>Explore Books</h2>
        
        <!-- Search functionality -->
        <div class="search-container">
            <form id="search-form">
                <input type="text" id="search-input" placeholder="Search by title, author or tags">
                <button type="submit" class="btn">Search</button>
                <!-- <button type="button" id="debugBooks" class="btn btn-secondary">Debug Books</button> -->
            </form>
        </div>

        <div class="notes-container">
            <div class="notes-toggle">‚úèÔ∏è</div>
            <div class="notes-area">
              <div id="notesText" class="content-editable" contenteditable="true" placeholder="Write your notes here..."><%- note %></div>
            </div>
        </div>

        <!-- Trending Books Section -->
        <section class="trending-books">
            <h3>Trending Books</h3>
            <div class="book-grid" id="trending-books-container">
                <% if (trendingBooks && trendingBooks.length > 0) { %>
                    <% trendingBooks.forEach(book => { %>
                        <div class="book-card" data-id="<%= book._id %>">
                            <div class="book-cover">
                                <img src="/thumbnail/<%= book._id %>" alt="<%= book.title %> cover" class="thumbnail" onerror="this.src='/images/default-thumbnail.png'">
                                <div class="pin-icon <%= pinnedBooks.includes(book._id.toString()) ? 'pinned' : '' %>" data-book-id="<%= book._id %>">
                                    <span class="pin-count"><%= book.pinCount || 0 %></span>
                                    üìå
                                </div>
                            </div>
                            <div class="book-info">
                                <h3><%= book.title %></h3>
                                <p class="author">by <%= book.author %></p>
                                <p class="visibility">
                                    <span class="visibility-badge visibility-<%= book.visibility %>">
                                        <%= book.visibility.charAt(0).toUpperCase() + book.visibility.slice(1) %>
                                    </span>
                                </p>
                                <div class="book-actions">
                                    <a href="/view/<%= book._id %>" class="btn btn-primary">View</a>
                                    <% if (book.visibility === 'restricted' && !book.accessList.includes(currentUser) && !pendingBookIds.includes(book._id.toString())) { %>
                                        <button class="btn btn-secondary request-access" data-book-id="<%= book._id %>">Request Access</button>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="empty-state">
                        <p>No trending books available.</p>
                    </div>
                <% } %>
            </div>
        </section>

        <!-- All Books Section -->
        <section class="all-books">
            <h3>All Books</h3>
            <div class="book-grid" id="books-container">
                <% if (books && books.length > 0) { %>
                    <% books.forEach(book => { %>
                        <div class="book-card" data-id="<%= book._id %>">
                            <div class="book-cover">
                                <img src="/thumbnail/<%= book._id %>" alt="<%= book.title %> cover" class="thumbnail" onerror="this.src='/images/default-thumbnail.png'">
                                <div class="pin-icon <%= pinnedBooks.includes(book._id.toString()) ? 'pinned' : '' %>" data-book-id="<%= book._id %>">
                                    <span class="pin-count"><%= book.pinCount || 0 %></span>
                                    üìå
                                </div>
                            </div>
                            <div class="book-info">
                                <h3><%= book.title %></h3>
                                <p class="author">by <%= book.author %></p>
                                <p class="visibility">
                                    <span class="visibility-badge visibility-<%= book.visibility %>">
                                        <%= book.visibility.charAt(0).toUpperCase() + book.visibility.slice(1) %>
                                    </span>
                                </p>
                                <div class="book-actions">
                                    <% if (book.visibility === 'public' || (book.visibility === 'restricted' && book.accessList.includes(currentUser))) { %>
                                        <a href="/view/<%= book._id %>" class="btn btn-primary">View</a>
                                    <% } else if (book.visibility === 'restricted') { %>
                                        <% if (pendingBookIds.includes(book._id.toString())) { %>
                                            <button class="btn btn-secondary disabled" disabled>Request Sent</button>
                                        <% } else { %>
                                            <button class="btn btn-secondary request-access" data-book-id="<%= book._id %>">Request Access</button>
                                        <% } %>
                                    <% } %>
                                </div>
                            </div>
                        </div>
                    <% }) %>
                <% } else { %>
                    <div class="empty-state">
                        <p>No books available.</p>
                    </div>
                <% } %>
            </div>
        </section>
    </main>
    
    <footer>
        <div class="container">
            <p>¬© 2025 BookHive. All rights reserved.</p>
        </div>
    </footer>
    
    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const notesToggle = document.querySelector('.notes-toggle');
            const notesArea = document.querySelector('.notes-area');
            const notesText = document.getElementById('notesText');
            let typingTimer;

            notesToggle.addEventListener('click', () => {
                const isVisible = notesArea.style.display === 'block';
                notesArea.style.display = isVisible ? 'none' : 'block';
            });

            notesText.addEventListener('input', () => {
                clearTimeout(typingTimer);
                typingTimer = setTimeout(saveNotes, 1000);
            });

            async function saveNotes() {
                const content = notesText.innerHTML;
                try {
                    const response = await fetch('/notes/save', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({ content })
                    });
                    const data = await response.json();
                    if (!data.success) {
                        console.error('Failed to save note:', data.message);
                    }
                } catch (err) {
                    console.error('Error saving note:', err);
                }
            }

            const booksContainer = document.getElementById('books-container');
            const trendingBooksContainer = document.getElementById('trending-books-container');
            const searchForm = document.getElementById('search-form');
            const searchInput = document.getElementById('search-input');

            // Check session status
            async function checkSession() {
                try {
                    const response = await fetch('/account/storage-info', {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });
                    if (!response.ok || response.status === 401) {
                        console.warn('Session check failed, redirecting to login');
                        window.location.href = '/login';
                        return false;
                    }
                    return true;
                } catch (err) {
                    console.error('Session check error:', err);
                    return false;
                }
            }

            // Event delegation for pin/unpin
            [booksContainer, trendingBooksContainer].forEach(container => {
                container.addEventListener('click', async (e) => {
                    const pinIcon = e.target.closest('.pin-icon');
                    if (!pinIcon) return;

                    const bookId = pinIcon.dataset.bookId;
                    console.log(`Pin/Unpin: Initiating for bookId=${bookId}`);

                    const isAuthenticated = await checkSession();
                    if (!isAuthenticated) {
                        alert('Session expired. Please log in again.');
                        return;
                    }

                    try {
                        const response = await fetch(`/book/${bookId}/pin?t=${Date.now()}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        console.log(`Pin/Unpin: Response status=${response.status}, ok=${response.ok}`);

                        if (!response.ok) {
                            const contentType = response.headers.get('Content-Type');
                            let errorText = await response.text();
                            if (contentType.includes('text/html')) {
                                errorText = 'Received HTML response (possibly a login redirect)';
                            }
                            throw new Error(`HTTP ${response.status}: ${errorText}`);
                        }

                        const data = await response.json();
                        if (data.success) {
                            const pinCountElement = pinIcon.querySelector('.pin-count');
                            pinCountElement.textContent = data.pinCount;
                            if (data.isPinned) {
                                pinIcon.classList.add('pinned');
                            } else {
                                pinIcon.classList.remove('pinned');
                            }
                        } else {
                            alert(`Failed to update pin status: ${data.message}`);
                        }
                    } catch (err) {
                        console.error(`Pin/Unpin: Error for bookId=${bookId}:`, err);
                        alert(`Error updating pin status: ${err.message}`);
                    }
                });
            });

            // Request access
            [booksContainer, trendingBooksContainer].forEach(container => {
                container.addEventListener('click', async (e) => {
                    const requestBtn = e.target.closest('.request-access');
                    if (!requestBtn) return;

                    const bookId = requestBtn.dataset.bookId;
                    console.log(`Request Access: Initiating for bookId=${bookId}`);

                    try {
                        const response = await fetch(`/request-access/${bookId}?t=${Date.now()}`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json',
                                'X-Requested-With': 'XMLHttpRequest'
                            }
                        });

                        console.log(`Request Access: Response status=${response.status}, ok=${response.ok}`);

                        if (!response.ok) {
                            const contentType = response.headers.get('Content-Type');
                            let errorText = await response.text();
                            if (contentType.includes('text/html')) {
                                errorText = 'Received HTML response (possibly a login redirect)';
                            }
                            throw new Error(`HTTP ${response.status}: ${errorText}`);
                        }

                        const data = await response.json();
                        if (data.success) {
                            requestBtn.textContent = 'Request Sent';
                            requestBtn.disabled = true;
                            requestBtn.classList.add('disabled');
                        } else {
                            alert(`Failed to request access: ${data.message}`);
                        }
                    } catch (err) {
                        console.error(`Request Access: Error for bookId=${bookId}:`, err);
                        alert(`Error requesting access: ${err.message}`);
                    }
                });
            });

            // Search functionality
            searchForm.addEventListener('submit', async (e) => {
                e.preventDefault();
                const query = searchInput.value.trim();
                if (!query) return;

                console.log(`Search: Query="${query}"`);

                try {
                    const response = await fetch(`/explore/search?query=${encodeURIComponent(query)}&t=${Date.now()}`, {
                        headers: {
                            'X-Requested-With': 'XMLHttpRequest'
                        }
                    });

                    console.log(`Search: Response status=${response.status}, ok=${response.ok}`);

                    if (!response.ok) {
                        const contentType = response.headers.get('Content-Type');
                        let errorText = await response.text();
                        if (contentType.includes('text/html')) {
                            errorText = 'Received HTML response (possibly a login redirect)';
                        }
                        throw new Error(`HTTP ${response.status}: ${errorText}`);
                    }

                    const data = await response.json();
                    booksContainer.innerHTML = '';

                    if (!data.books || data.books.length === 0) {
                        booksContainer.innerHTML = `
                            <div class="empty-state">
                                <p>No books found matching your search.</p>
                            </div>
                        `;
                        return;
                    }

                    data.books.forEach(book => {
                        const isPinned = <%= JSON.stringify(pinnedBooks) %>.includes(book._id.toString());
                        const bookCard = `
                            <div class="book-card" data-id="${book._id}">
                                <div class="book-cover">
                                    <img src="/thumbnail/${book._id}" alt="${book.title} cover" class="thumbnail" onerror="this.src='/images/default-thumbnail.png'">
                                    <div class="pin-icon ${isPinned ? 'pinned' : ''}" data-book-id="${book._id}">
                                        <span class="pin-count">${book.pinCount || 0}</span>
                                        üìå
                                    </div>
                                </div>
                                <div class="book-info">
                                    <h3>${book.title}</h3>
                                    <p class="author">by ${book.author}</p>
                                    <p class="visibility">
                                        <span class="visibility-badge visibility-${book.visibility}">
                                            ${book.visibility.charAt(0).toUpperCase() + book.visibility.slice(1)}
                                        </span>
                                    </p>
                                    <div class="book-actions">
                                        ${book.visibility === 'public' || (book.visibility === 'restricted' && book.accessList.includes('<%= currentUser %>')) ? `<a href="/view/${book._id}" class="btn btn-primary">View</a>` : ''}
                                        ${book.visibility === 'restricted' && !book.accessList.includes('<%= currentUser %>') && <%= JSON.stringify(pendingBookIds) %>.includes(book._id.toString()) ? `<button class="btn btn-secondary disabled" disabled>Request Sent</button>` : ''}
                                        ${book.visibility === 'restricted' && !book.accessList.includes('<%= currentUser %>') && !<%= JSON.stringify(pendingBookIds) %>.includes(book._id.toString()) ? `<button class="btn btn-secondary request-access" data-book-id="${book._id}">Request Access</button>` : ''}
                                    </div>
                                </div>
                            </div>
                        `;
                        booksContainer.innerHTML += bookCard;
                    });
                } catch (err) {
                    console.error(`Search: Error for query="${query}":`, err);
                    booksContainer.innerHTML = `
                        <div class="empty-state">
                            <p>Error searching books: ${err.message}</p>
                        </div>
                    `;
                }
            });
        });
    </script>
</body>
</html>
